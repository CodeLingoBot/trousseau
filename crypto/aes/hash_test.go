package aes

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/assert"
)

var hashtests = map[string]struct {
	in     string
	out    []byte
	outHEX string
}{
	"non empty passphrase outputs valid hash": {
		"passphrase",
		[]byte{
			0x1e, 0x8, 0x9e, 0x3c, 0x53, 0x23, 0xad, 0x80,
			0xa9, 0x7, 0x67, 0xbd, 0xd5, 0x90, 0x72, 0x97,
			0xb4, 0x13, 0x81, 0x63, 0xf0, 0x27, 0x9, 0x7f,
			0xd3, 0xbd, 0xbe, 0xab, 0x52, 0x8d, 0x2d, 0x68,
		},
		"1e089e3c5323ad80a90767bdd5907297b4138163f027097fd3bdbeab528d2d68",
	},
	"empty passphrase outputs valid hash": {
		"",
		[]byte{
			0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
			0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
			0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
			0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
		},
		"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
	},
}

func TestHashPassphrase(t *testing.T) {
	for name, test := range hashtests {
		t.Run(name, func(t *testing.T) {
			out := HashPassphrase(test.in)
			assert.Equal(t, test.out, out)
			assert.Equal(t, test.outHEX, hex.EncodeToString(out))
		})
	}
}
